import System
import System.Diagnostics
import System.Windows
import System.Windows.Input
import WpfCalculator.Commands
import WpfCalculator.Models

.array 0

namespace WpfCalculator.ViewModels
	
	public class CalculatorViewModel extends ViewModelBase
		
		private mModel, @Models.CalculationModel
		private mDigitButtonCommand, @RelayCommand
		private mOperationButtonCommand, @RelayCommand
		private mSingleOperationButtonCommand, @RelayCommand
		private mLastOperation, string
		private mNewDisplayRequired, boolean, false
		private mDisplay, string
		
		public method CalculatorViewModel
			endparams
		proc
			this.mModel = new CalculationModel()
			this.mDisplay = "0"
			this.FirstOperand = string.Empty
			this.SecondOperand = string.Empty
			this.Operation = string.Empty
			this.mLastOperation = string.Empty
		endmethod
		
		public property FirstOperand, string
			method get
			proc
				mreturn mModel.FirstOperand
			endmethod
			method set
			proc
				mModel.FirstOperand = value
			endmethod
		endproperty
		
		public property SecondOperand, string
			method get
			proc
				mreturn mModel.SecondOperand
			endmethod
			method set
			proc
				mModel.SecondOperand = value
			endmethod
		endproperty
		
		public property Operation, string
			method get
			proc
				mreturn mModel.Operation
			endmethod
			method set
			proc
				mModel.Operation = value
			endmethod
		endproperty
		
		public property LastOperation, string
			method get
			proc
				mreturn mLastOperation
			endmethod
			method set
			proc
				mLastOperation = value
			endmethod
		endproperty
		
		public property Result, string
			method get
			proc
				mreturn mModel.Result
			endmethod
		endproperty
		
		public property Display, string
			method get
			proc
				mreturn mDisplay
			endmethod
			method set
			proc
				mDisplay = value
				NotifyPropertyChanged("Display")
			endmethod
		endproperty
		
		public property OperationButton, @ICommand
			method get
			proc
				if ((mOperationButtonCommand == ^null))
					mOperationButtonCommand = new RelayCommand(doOperationButton)
				mreturn mOperationButtonCommand
			endmethod
		endproperty

		;; for operations with 2 operands		
		public method doOperationButton, void
			operation, @object 
			endparams
		proc
			try
			begin
				if ((FirstOperand == string.Empty) || (LastOperation == "=")) then
				begin
					FirstOperand = mDisplay
					LastOperation = (string)operation
				end
				else
				begin
					SecondOperand = mDisplay
					this.Operation = mLastOperation
					mModel.CalculateResult()
					LastOperation = (string)operation
					Display = Result
					FirstOperand = mDisplay
				end
				mNewDisplayRequired = true
			end
			catch (ex)
			begin
				if (Result==string.Empty) then
					Display = "Error"
				else
					Display = Result
			end
			endtry
		endmethod
		
		public property SingleOperationButton, @ICommand
			method get
			proc
				if (mSingleOperationButtonCommand == ^null)
					mSingleOperationButtonCommand = new RelayCommand(doSingleOperationButton)
				mreturn mSingleOperationButtonCommand
			endmethod
		endproperty

		;; for sin,cos,tan		
		public method doSingleOperationButton, void
			operation, @object 
			endparams
		proc
			try
			begin
				this.FirstOperand = this.Display
				this.Operation = (string)operation
				mModel.CalculateResult()
				LastOperation = "="
				Display = Result
				FirstOperand = mDisplay
				mNewDisplayRequired = true
			end
			catch (syn_exception)
			begin
				if (Result==string.Empty) then
					Display = "Error"
				else
					Display = Result
			end
			endtry
		endmethod
		
		public property DigitButton, @ICommand
			method get
			proc
				if (mDigitButtonCommand == ^null)
					mDigitButtonCommand = new RelayCommand(doDigitButton)
				mreturn mDigitButtonCommand
			endmethod
		endproperty

		;; deals with button inputs and sorts out the display accordingly		
		public method doDigitButton, void
			button, @object 
			endparams
		proc
			using ((string)button) select
			("C"),
			begin
				Display = "0"
				FirstOperand = string.Empty
				SecondOperand = string.Empty
				Operation = string.Empty
				LastOperation = string.Empty
			end
			("Del"),
			begin
				if (mDisplay.Length > 1) then
					Display = mDisplay.Substring(0, (mDisplay.Length - 1))
				else
					Display = "0"
			end
			("+/-"),
			begin
				if (mDisplay.Contains("-") || (mDisplay == "0")) then
					Display = mDisplay.Remove(mDisplay.IndexOf("-"), 1)
				else
					Display = "-" + mDisplay
			end
			("."),
			begin
				if (mNewDisplayRequired) then
					Display = "0."
				else
					if (!mDisplay.Contains("."))
						Display = mDisplay + "."
			end
			(),
			begin
				if ((mDisplay == "0") || mNewDisplayRequired) then
					Display = (string)button
				else
					Display = mDisplay + (string)button
			end
			endusing
			mNewDisplayRequired = false
		endmethod

	endclass

endnamespace
